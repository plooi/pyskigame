from pylooiengine import *
from pylooiengine.gui import *
import easygui
import world



class Room(LooiObject):
    def __init__(self):
        super().__init__()
        self.active_contents = []
        self.inactive_contents = []
        self.entering = False
        self.exiting = False
        self.upon_enter = lambda:None
        self.upon_exit = lambda:None
    def add(self, looi_object):
        if looi_object.is_active():
            self.active_contents.append(looi_object)
        else:
            self.inactive_contents.append(looi_object)
    def step(self):
        if self.entering:
            for looi_object in self.active_contents:
                looi_object.activate()
            self.upon_enter()
            self.entering = False
        elif self.exiting:
            i = 0
            while i < len(self.active_contents):
                if not self.active_contents[i].is_active():
                    self.inactive_contents.append(self.active_contents[i])
                    del self.active_contents[i]
                    i -= 1
                i += 1
            i = 0
            while i < len(self.inactive_contents):
                if self.inactive_contents[i].is_active():
                    self.active_contents.append(self.inactive_contents[i])
                    del self.inactive_contents[i]
                    i -= 1
                i += 1
            for looi_object in self.active_contents:
                looi_object.deactivate()
            for looi_object in self.inactive_contents:
                looi_object.deactivate()
            self.upon_exit()
            self.exiting = False
    def enter(self):
        self.entering = True
        self.exiting = False
    def exit(self):
        self.exiting = True
        self.entering = False
        
import game_room


main_menu = Room()
new_world = Room()
game = game_room.GameRoom()

new_world.exit()
game.exit()
main_menu.enter()









#main menu room
def new_world_btn():
    main_menu.exit()
    new_world.enter()
new = Button(800, 200, 400, 100, "New World", new_world_btn, Color(.6,.6,.6), black, 64)
new.button_depth = 10
main_menu.add(new)
load = Button(800, 300, 400, 100, "Load", lambda x:0, Color(.6,.6,.6), black, 64)
load.button_depth = 10
main_menu.add(load)
abort = Button(800, 400, 400, 100, "Quit", lambda x:quit(), Color(.6,.6,.6), black, 64)
abort.button_depth = 10
main_menu.add(abort)


#new world room


def create_world():
    class NewWorldPrompt(LooiObject):
        def __init__(self):
            super().__init__()
            self.wait = 1
        def step(self):
            if self.wait == 0:
                self.do_prompt()
            self.wait -= 1
        def do_prompt(self):
            res = easygui.choicebox(msg="Would you like to start with a blank world or a world generated by topographic data?", choices=["Blank", "Data File"])
            if res == "Blank":
                res = easygui.multenterbox(fields=["Name", "Width", "Height"])
                the_world = world.new_world_from_dims(res[0], int(res[1]), int(res[2]))
                
                game.load_mode = "new"
                game.world = the_world
                new_world.exit()
                game.enter()
            elif res == "Data File":
                res = easygui.multenterbox(fields=["Name", "Data File"])
                the_world = world.new_world_from_data_file(res[0], res[1])
                game.load_mode = "new"
                game.world = the_world
                new_world.exit()
                game.enter()
                
            else:
                self.exit_to(main_menu)
        def exit_to(self, room):
            self.deactivate()
            new_world.exit()
            room.enter()
    n = NewWorldPrompt()
    
new_world.upon_enter = create_world



